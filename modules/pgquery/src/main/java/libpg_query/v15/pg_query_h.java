// Generated by jextract

package libpg_query.v15;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class pg_query_h {

    pg_query_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("pg_query"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int _STDINT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return _STDINT_H;
    }
    private static final int _FEATURES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __SYSCALL_WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return __SYSCALL_WORDSIZE;
    }
    private static final int __USE_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int __GLIBC_USE_C2X_STRTOL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_C2X_STRTOL 0
     * }
     */
    public static int __GLIBC_USE_C2X_STRTOL() {
        return __GLIBC_USE_C2X_STRTOL;
    }
    private static final int _STDC_PREDEF_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)39L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 39
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int __GLIBC_USE_LIB_EXT2 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return __GLIBC_USE_LIB_EXT2;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return __GLIBC_USE_IEC_60559_BFP_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_BFP_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return __GLIBC_USE_IEC_60559_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_TYPES_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return __GLIBC_USE_IEC_60559_TYPES_EXT;
    }
    private static final int _BITS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int _BITS_WCHAR_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return _BITS_WCHAR_H;
    }
    private static final int _BITS_STDINT_INTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return _BITS_STDINT_INTN_H;
    }
    private static final int _BITS_STDINT_UINTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return _BITS_STDINT_UINTN_H;
    }
    private static final int _BITS_STDINT_LEAST_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_LEAST_H 1
     * }
     */
    public static int _BITS_STDINT_LEAST_H() {
        return _BITS_STDINT_LEAST_H;
    }
    private static final int _SYS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_TYPES_H 1
     * }
     */
    public static int _SYS_TYPES_H() {
        return _SYS_TYPES_H;
    }
    private static final int __clock_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __clock_t_defined 1
     * }
     */
    public static int __clock_t_defined() {
        return __clock_t_defined;
    }
    private static final int __clockid_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __clockid_t_defined 1
     * }
     */
    public static int __clockid_t_defined() {
        return __clockid_t_defined;
    }
    private static final int __time_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __time_t_defined 1
     * }
     */
    public static int __time_t_defined() {
        return __time_t_defined;
    }
    private static final int __timer_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __timer_t_defined 1
     * }
     */
    public static int __timer_t_defined() {
        return __timer_t_defined;
    }
    private static final int __BIT_TYPES_DEFINED__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __BIT_TYPES_DEFINED__ 1
     * }
     */
    public static int __BIT_TYPES_DEFINED__() {
        return __BIT_TYPES_DEFINED__;
    }
    private static final int _ENDIAN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ENDIAN_H 1
     * }
     */
    public static int _ENDIAN_H() {
        return _ENDIAN_H;
    }
    private static final int _BITS_ENDIAN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_ENDIAN_H 1
     * }
     */
    public static int _BITS_ENDIAN_H() {
        return _BITS_ENDIAN_H;
    }
    private static final int __LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __LITTLE_ENDIAN 1234
     * }
     */
    public static int __LITTLE_ENDIAN() {
        return __LITTLE_ENDIAN;
    }
    private static final int __BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define __BIG_ENDIAN 4321
     * }
     */
    public static int __BIG_ENDIAN() {
        return __BIG_ENDIAN;
    }
    private static final int __PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define __PDP_ENDIAN 3412
     * }
     */
    public static int __PDP_ENDIAN() {
        return __PDP_ENDIAN;
    }
    private static final int _BITS_ENDIANNESS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_ENDIANNESS_H 1
     * }
     */
    public static int _BITS_ENDIANNESS_H() {
        return _BITS_ENDIANNESS_H;
    }
    private static final int _BITS_BYTESWAP_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_BYTESWAP_H 1
     * }
     */
    public static int _BITS_BYTESWAP_H() {
        return _BITS_BYTESWAP_H;
    }
    private static final int _BITS_UINTN_IDENTITY_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_UINTN_IDENTITY_H 1
     * }
     */
    public static int _BITS_UINTN_IDENTITY_H() {
        return _BITS_UINTN_IDENTITY_H;
    }
    private static final int _SYS_SELECT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_SELECT_H 1
     * }
     */
    public static int _SYS_SELECT_H() {
        return _SYS_SELECT_H;
    }
    private static final int __sigset_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __sigset_t_defined 1
     * }
     */
    public static int __sigset_t_defined() {
        return __sigset_t_defined;
    }
    private static final int __timeval_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __timeval_defined 1
     * }
     */
    public static int __timeval_defined() {
        return __timeval_defined;
    }
    private static final int _STRUCT_TIMESPEC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STRUCT_TIMESPEC 1
     * }
     */
    public static int _STRUCT_TIMESPEC() {
        return _STRUCT_TIMESPEC;
    }
    private static final int _BITS_PTHREADTYPES_COMMON_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_PTHREADTYPES_COMMON_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return _BITS_PTHREADTYPES_COMMON_H;
    }
    private static final int _THREAD_SHARED_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _THREAD_SHARED_TYPES_H 1
     * }
     */
    public static int _THREAD_SHARED_TYPES_H() {
        return _THREAD_SHARED_TYPES_H;
    }
    private static final int _BITS_PTHREADTYPES_ARCH_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_PTHREADTYPES_ARCH_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return _BITS_PTHREADTYPES_ARCH_H;
    }
    private static final int __SIZEOF_PTHREAD_MUTEX_T = (int)40L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_MUTEX_T 40
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return __SIZEOF_PTHREAD_MUTEX_T;
    }
    private static final int __SIZEOF_PTHREAD_ATTR_T = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_ATTR_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return __SIZEOF_PTHREAD_ATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_RWLOCK_T = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_RWLOCK_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return __SIZEOF_PTHREAD_RWLOCK_T;
    }
    private static final int __SIZEOF_PTHREAD_BARRIER_T = (int)32L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_BARRIER_T 32
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return __SIZEOF_PTHREAD_BARRIER_T;
    }
    private static final int __SIZEOF_PTHREAD_MUTEXATTR_T = (int)4L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_MUTEXATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return __SIZEOF_PTHREAD_MUTEXATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_COND_T = (int)48L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_COND_T 48
     * }
     */
    public static int __SIZEOF_PTHREAD_COND_T() {
        return __SIZEOF_PTHREAD_COND_T;
    }
    private static final int __SIZEOF_PTHREAD_CONDATTR_T = (int)4L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_CONDATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return __SIZEOF_PTHREAD_CONDATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_RWLOCKATTR_T = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return __SIZEOF_PTHREAD_RWLOCKATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_BARRIERATTR_T = (int)4L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_BARRIERATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return __SIZEOF_PTHREAD_BARRIERATTR_T;
    }
    private static final int _THREAD_MUTEX_INTERNAL_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _THREAD_MUTEX_INTERNAL_H 1
     * }
     */
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return _THREAD_MUTEX_INTERNAL_H;
    }
    private static final int __PTHREAD_MUTEX_HAVE_PREV = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_HAVE_PREV 1
     * }
     */
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return __PTHREAD_MUTEX_HAVE_PREV;
    }
    private static final int __have_pthread_attr_t = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __have_pthread_attr_t 1
     * }
     */
    public static int __have_pthread_attr_t() {
        return __have_pthread_attr_t;
    }
    private static final int PG_QUERY_PARSE_MODE_BITS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define PG_QUERY_PARSE_MODE_BITS 4
     * }
     */
    public static int PG_QUERY_PARSE_MODE_BITS() {
        return PG_QUERY_PARSE_MODE_BITS;
    }
    private static final int PG_QUERY_DISABLE_BACKSLASH_QUOTE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define PG_QUERY_DISABLE_BACKSLASH_QUOTE 16
     * }
     */
    public static int PG_QUERY_DISABLE_BACKSLASH_QUOTE() {
        return PG_QUERY_DISABLE_BACKSLASH_QUOTE;
    }
    private static final int PG_QUERY_DISABLE_STANDARD_CONFORMING_STRINGS = (int)32L;
    /**
     * {@snippet lang=c :
     * #define PG_QUERY_DISABLE_STANDARD_CONFORMING_STRINGS 32
     * }
     */
    public static int PG_QUERY_DISABLE_STANDARD_CONFORMING_STRINGS() {
        return PG_QUERY_DISABLE_STANDARD_CONFORMING_STRINGS;
    }
    private static final int PG_QUERY_DISABLE_ESCAPE_STRING_WARNING = (int)64L;
    /**
     * {@snippet lang=c :
     * #define PG_QUERY_DISABLE_ESCAPE_STRING_WARNING 64
     * }
     */
    public static int PG_QUERY_DISABLE_ESCAPE_STRING_WARNING() {
        return PG_QUERY_DISABLE_ESCAPE_STRING_WARNING;
    }
    private static final int PG_VERSION_NUM = (int)150001L;
    /**
     * {@snippet lang=c :
     * #define PG_VERSION_NUM 150001
     * }
     */
    public static int PG_VERSION_NUM() {
        return PG_VERSION_NUM;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = pg_query_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = pg_query_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = pg_query_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = pg_query_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = pg_query_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = pg_query_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = pg_query_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = pg_query_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = pg_query_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = pg_query_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = pg_query_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = pg_query_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = pg_query_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = pg_query_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t uint8_t
     * }
     */
    public static final OfByte uint8_t = pg_query_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t uint16_t
     * }
     */
    public static final OfShort uint16_t = pg_query_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t uint32_t
     * }
     */
    public static final OfInt uint32_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t uint64_t
     * }
     */
    public static final OfLong uint64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int_least8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = pg_query_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int_least16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = pg_query_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int_least32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int_least64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint_least8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = pg_query_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint_least16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = pg_query_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = pg_query_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long int_fast16_t
     * }
     */
    public static final OfLong int_fast16_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast32_t
     * }
     */
    public static final OfLong int_fast32_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = pg_query_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast16_t
     * }
     */
    public static final OfLong uint_fast16_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast32_t
     * }
     */
    public static final OfLong uint_fast32_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intptr_t
     * }
     */
    public static final OfLong intptr_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __intmax_t intmax_t
     * }
     */
    public static final OfLong intmax_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uintmax_t uintmax_t
     * }
     */
    public static final OfLong uintmax_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u_char u_char
     * }
     */
    public static final OfByte u_char = pg_query_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __u_short u_short
     * }
     */
    public static final OfShort u_short = pg_query_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u_int u_int
     * }
     */
    public static final OfInt u_int = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u_long u_long
     * }
     */
    public static final OfLong u_long = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __quad_t quad_t
     * }
     */
    public static final OfLong quad_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u_quad_t u_quad_t
     * }
     */
    public static final OfLong u_quad_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __loff_t loff_t
     * }
     */
    public static final OfLong loff_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __ino_t ino_t
     * }
     */
    public static final OfLong ino_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __dev_t dev_t
     * }
     */
    public static final OfLong dev_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __gid_t gid_t
     * }
     */
    public static final OfInt gid_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __mode_t mode_t
     * }
     */
    public static final OfInt mode_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __nlink_t nlink_t
     * }
     */
    public static final OfLong nlink_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uid_t uid_t
     * }
     */
    public static final OfInt uid_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __off_t off_t
     * }
     */
    public static final OfLong off_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __pid_t pid_t
     * }
     */
    public static final OfInt pid_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __id_t id_t
     * }
     */
    public static final OfInt id_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __ssize_t ssize_t
     * }
     */
    public static final OfLong ssize_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __daddr_t daddr_t
     * }
     */
    public static final OfInt daddr_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __caddr_t caddr_t
     * }
     */
    public static final AddressLayout caddr_t = pg_query_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __key_t key_t
     * }
     */
    public static final OfInt key_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __clock_t clock_t
     * }
     */
    public static final OfLong clock_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __clockid_t clockid_t
     * }
     */
    public static final OfInt clockid_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __time_t time_t
     * }
     */
    public static final OfLong time_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __timer_t timer_t
     * }
     */
    public static final AddressLayout timer_t = pg_query_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long ulong
     * }
     */
    public static final OfLong ulong = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned short ushort
     * }
     */
    public static final OfShort ushort = pg_query_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint
     * }
     */
    public static final OfInt uint = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t u_int8_t
     * }
     */
    public static final OfByte u_int8_t = pg_query_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t u_int16_t
     * }
     */
    public static final OfShort u_int16_t = pg_query_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t u_int32_t
     * }
     */
    public static final OfInt u_int32_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t u_int64_t
     * }
     */
    public static final OfLong u_int64_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int register_t
     * }
     */
    public static final OfLong register_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __suseconds_t suseconds_t
     * }
     */
    public static final OfLong suseconds_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fd_mask
     * }
     */
    public static final OfLong __fd_mask = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fd_mask fd_mask
     * }
     */
    public static final OfLong fd_mask = pg_query_h.C_LONG;

    private static class select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            pg_query_h.C_INT,
            pg_query_h.C_INT,
            pg_query_h.C_POINTER,
            pg_query_h.C_POINTER,
            pg_query_h.C_POINTER,
            pg_query_h.C_POINTER
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("select");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static FunctionDescriptor select$descriptor() {
        return select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static MethodHandle select$handle() {
        return select.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static MemorySegment select$address() {
        return select.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("select", __nfds, __readfds, __writefds, __exceptfds, __timeout);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pselect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            pg_query_h.C_INT,
            pg_query_h.C_INT,
            pg_query_h.C_POINTER,
            pg_query_h.C_POINTER,
            pg_query_h.C_POINTER,
            pg_query_h.C_POINTER,
            pg_query_h.C_POINTER
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pselect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static FunctionDescriptor pselect$descriptor() {
        return pselect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static MethodHandle pselect$handle() {
        return pselect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static MemorySegment pselect$address() {
        return pselect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pselect", __nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __blksize_t blksize_t
     * }
     */
    public static final OfLong blksize_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __blkcnt_t blkcnt_t
     * }
     */
    public static final OfLong blkcnt_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsblkcnt_t fsblkcnt_t
     * }
     */
    public static final OfLong fsblkcnt_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsfilcnt_t fsfilcnt_t
     * }
     */
    public static final OfLong fsfilcnt_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __tss_t
     * }
     */
    public static final OfInt __tss_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __thrd_t
     * }
     */
    public static final OfLong __thrd_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long pthread_t
     * }
     */
    public static final OfLong pthread_t = pg_query_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int pthread_key_t
     * }
     */
    public static final OfInt pthread_key_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int pthread_once_t
     * }
     */
    public static final OfInt pthread_once_t = pg_query_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef volatile int pthread_spinlock_t
     * }
     */
    public static final OfInt pthread_spinlock_t = pg_query_h.C_INT;
    private static final int PG_QUERY_PARSE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PG_QUERY_PARSE_DEFAULT = 0
     * }
     */
    public static int PG_QUERY_PARSE_DEFAULT() {
        return PG_QUERY_PARSE_DEFAULT;
    }
    private static final int PG_QUERY_PARSE_TYPE_NAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PG_QUERY_PARSE_TYPE_NAME = 1
     * }
     */
    public static int PG_QUERY_PARSE_TYPE_NAME() {
        return PG_QUERY_PARSE_TYPE_NAME;
    }
    private static final int PG_QUERY_PARSE_PLPGSQL_EXPR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PG_QUERY_PARSE_PLPGSQL_EXPR = 2
     * }
     */
    public static int PG_QUERY_PARSE_PLPGSQL_EXPR() {
        return PG_QUERY_PARSE_PLPGSQL_EXPR;
    }
    private static final int PG_QUERY_PARSE_PLPGSQL_ASSIGN1 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PG_QUERY_PARSE_PLPGSQL_ASSIGN1 = 3
     * }
     */
    public static int PG_QUERY_PARSE_PLPGSQL_ASSIGN1() {
        return PG_QUERY_PARSE_PLPGSQL_ASSIGN1;
    }
    private static final int PG_QUERY_PARSE_PLPGSQL_ASSIGN2 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PG_QUERY_PARSE_PLPGSQL_ASSIGN2 = 4
     * }
     */
    public static int PG_QUERY_PARSE_PLPGSQL_ASSIGN2() {
        return PG_QUERY_PARSE_PLPGSQL_ASSIGN2;
    }
    private static final int PG_QUERY_PARSE_PLPGSQL_ASSIGN3 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PG_QUERY_PARSE_PLPGSQL_ASSIGN3 = 5
     * }
     */
    public static int PG_QUERY_PARSE_PLPGSQL_ASSIGN3() {
        return PG_QUERY_PARSE_PLPGSQL_ASSIGN3;
    }

    private static class pg_query_normalize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PgQueryNormalizeResult.layout(),
            pg_query_h.C_POINTER
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_normalize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PgQueryNormalizeResult pg_query_normalize(const char *input)
     * }
     */
    public static FunctionDescriptor pg_query_normalize$descriptor() {
        return pg_query_normalize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PgQueryNormalizeResult pg_query_normalize(const char *input)
     * }
     */
    public static MethodHandle pg_query_normalize$handle() {
        return pg_query_normalize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PgQueryNormalizeResult pg_query_normalize(const char *input)
     * }
     */
    public static MemorySegment pg_query_normalize$address() {
        return pg_query_normalize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PgQueryNormalizeResult pg_query_normalize(const char *input)
     * }
     */
    public static MemorySegment pg_query_normalize(SegmentAllocator allocator, MemorySegment input) {
        var mh$ = pg_query_normalize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_normalize", allocator, input);
            }
            return (MemorySegment)mh$.invokeExact(allocator, input);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_scan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PgQueryScanResult.layout(),
            pg_query_h.C_POINTER
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_scan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PgQueryScanResult pg_query_scan(const char *input)
     * }
     */
    public static FunctionDescriptor pg_query_scan$descriptor() {
        return pg_query_scan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PgQueryScanResult pg_query_scan(const char *input)
     * }
     */
    public static MethodHandle pg_query_scan$handle() {
        return pg_query_scan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PgQueryScanResult pg_query_scan(const char *input)
     * }
     */
    public static MemorySegment pg_query_scan$address() {
        return pg_query_scan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PgQueryScanResult pg_query_scan(const char *input)
     * }
     */
    public static MemorySegment pg_query_scan(SegmentAllocator allocator, MemorySegment input) {
        var mh$ = pg_query_scan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_scan", allocator, input);
            }
            return (MemorySegment)mh$.invokeExact(allocator, input);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PgQueryParseResult.layout(),
            pg_query_h.C_POINTER
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_parse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PgQueryParseResult pg_query_parse(const char *input)
     * }
     */
    public static FunctionDescriptor pg_query_parse$descriptor() {
        return pg_query_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PgQueryParseResult pg_query_parse(const char *input)
     * }
     */
    public static MethodHandle pg_query_parse$handle() {
        return pg_query_parse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PgQueryParseResult pg_query_parse(const char *input)
     * }
     */
    public static MemorySegment pg_query_parse$address() {
        return pg_query_parse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PgQueryParseResult pg_query_parse(const char *input)
     * }
     */
    public static MemorySegment pg_query_parse(SegmentAllocator allocator, MemorySegment input) {
        var mh$ = pg_query_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_parse", allocator, input);
            }
            return (MemorySegment)mh$.invokeExact(allocator, input);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_parse_opts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PgQueryParseResult.layout(),
            pg_query_h.C_POINTER,
            pg_query_h.C_INT
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_parse_opts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PgQueryParseResult pg_query_parse_opts(const char *input, int parser_options)
     * }
     */
    public static FunctionDescriptor pg_query_parse_opts$descriptor() {
        return pg_query_parse_opts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PgQueryParseResult pg_query_parse_opts(const char *input, int parser_options)
     * }
     */
    public static MethodHandle pg_query_parse_opts$handle() {
        return pg_query_parse_opts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PgQueryParseResult pg_query_parse_opts(const char *input, int parser_options)
     * }
     */
    public static MemorySegment pg_query_parse_opts$address() {
        return pg_query_parse_opts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PgQueryParseResult pg_query_parse_opts(const char *input, int parser_options)
     * }
     */
    public static MemorySegment pg_query_parse_opts(SegmentAllocator allocator, MemorySegment input, int parser_options) {
        var mh$ = pg_query_parse_opts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_parse_opts", allocator, input, parser_options);
            }
            return (MemorySegment)mh$.invokeExact(allocator, input, parser_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_parse_protobuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PgQueryProtobufParseResult.layout(),
            pg_query_h.C_POINTER
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_parse_protobuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PgQueryProtobufParseResult pg_query_parse_protobuf(const char *input)
     * }
     */
    public static FunctionDescriptor pg_query_parse_protobuf$descriptor() {
        return pg_query_parse_protobuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PgQueryProtobufParseResult pg_query_parse_protobuf(const char *input)
     * }
     */
    public static MethodHandle pg_query_parse_protobuf$handle() {
        return pg_query_parse_protobuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PgQueryProtobufParseResult pg_query_parse_protobuf(const char *input)
     * }
     */
    public static MemorySegment pg_query_parse_protobuf$address() {
        return pg_query_parse_protobuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PgQueryProtobufParseResult pg_query_parse_protobuf(const char *input)
     * }
     */
    public static MemorySegment pg_query_parse_protobuf(SegmentAllocator allocator, MemorySegment input) {
        var mh$ = pg_query_parse_protobuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_parse_protobuf", allocator, input);
            }
            return (MemorySegment)mh$.invokeExact(allocator, input);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_parse_protobuf_opts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PgQueryProtobufParseResult.layout(),
            pg_query_h.C_POINTER,
            pg_query_h.C_INT
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_parse_protobuf_opts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PgQueryProtobufParseResult pg_query_parse_protobuf_opts(const char *input, int parser_options)
     * }
     */
    public static FunctionDescriptor pg_query_parse_protobuf_opts$descriptor() {
        return pg_query_parse_protobuf_opts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PgQueryProtobufParseResult pg_query_parse_protobuf_opts(const char *input, int parser_options)
     * }
     */
    public static MethodHandle pg_query_parse_protobuf_opts$handle() {
        return pg_query_parse_protobuf_opts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PgQueryProtobufParseResult pg_query_parse_protobuf_opts(const char *input, int parser_options)
     * }
     */
    public static MemorySegment pg_query_parse_protobuf_opts$address() {
        return pg_query_parse_protobuf_opts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PgQueryProtobufParseResult pg_query_parse_protobuf_opts(const char *input, int parser_options)
     * }
     */
    public static MemorySegment pg_query_parse_protobuf_opts(SegmentAllocator allocator, MemorySegment input, int parser_options) {
        var mh$ = pg_query_parse_protobuf_opts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_parse_protobuf_opts", allocator, input, parser_options);
            }
            return (MemorySegment)mh$.invokeExact(allocator, input, parser_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_parse_plpgsql {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PgQueryPlpgsqlParseResult.layout(),
            pg_query_h.C_POINTER
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_parse_plpgsql");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PgQueryPlpgsqlParseResult pg_query_parse_plpgsql(const char *input)
     * }
     */
    public static FunctionDescriptor pg_query_parse_plpgsql$descriptor() {
        return pg_query_parse_plpgsql.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PgQueryPlpgsqlParseResult pg_query_parse_plpgsql(const char *input)
     * }
     */
    public static MethodHandle pg_query_parse_plpgsql$handle() {
        return pg_query_parse_plpgsql.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PgQueryPlpgsqlParseResult pg_query_parse_plpgsql(const char *input)
     * }
     */
    public static MemorySegment pg_query_parse_plpgsql$address() {
        return pg_query_parse_plpgsql.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PgQueryPlpgsqlParseResult pg_query_parse_plpgsql(const char *input)
     * }
     */
    public static MemorySegment pg_query_parse_plpgsql(SegmentAllocator allocator, MemorySegment input) {
        var mh$ = pg_query_parse_plpgsql.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_parse_plpgsql", allocator, input);
            }
            return (MemorySegment)mh$.invokeExact(allocator, input);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_fingerprint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PgQueryFingerprintResult.layout(),
            pg_query_h.C_POINTER
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_fingerprint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PgQueryFingerprintResult pg_query_fingerprint(const char *input)
     * }
     */
    public static FunctionDescriptor pg_query_fingerprint$descriptor() {
        return pg_query_fingerprint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PgQueryFingerprintResult pg_query_fingerprint(const char *input)
     * }
     */
    public static MethodHandle pg_query_fingerprint$handle() {
        return pg_query_fingerprint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PgQueryFingerprintResult pg_query_fingerprint(const char *input)
     * }
     */
    public static MemorySegment pg_query_fingerprint$address() {
        return pg_query_fingerprint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PgQueryFingerprintResult pg_query_fingerprint(const char *input)
     * }
     */
    public static MemorySegment pg_query_fingerprint(SegmentAllocator allocator, MemorySegment input) {
        var mh$ = pg_query_fingerprint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_fingerprint", allocator, input);
            }
            return (MemorySegment)mh$.invokeExact(allocator, input);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_fingerprint_opts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PgQueryFingerprintResult.layout(),
            pg_query_h.C_POINTER,
            pg_query_h.C_INT
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_fingerprint_opts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PgQueryFingerprintResult pg_query_fingerprint_opts(const char *input, int parser_options)
     * }
     */
    public static FunctionDescriptor pg_query_fingerprint_opts$descriptor() {
        return pg_query_fingerprint_opts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PgQueryFingerprintResult pg_query_fingerprint_opts(const char *input, int parser_options)
     * }
     */
    public static MethodHandle pg_query_fingerprint_opts$handle() {
        return pg_query_fingerprint_opts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PgQueryFingerprintResult pg_query_fingerprint_opts(const char *input, int parser_options)
     * }
     */
    public static MemorySegment pg_query_fingerprint_opts$address() {
        return pg_query_fingerprint_opts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PgQueryFingerprintResult pg_query_fingerprint_opts(const char *input, int parser_options)
     * }
     */
    public static MemorySegment pg_query_fingerprint_opts(SegmentAllocator allocator, MemorySegment input, int parser_options) {
        var mh$ = pg_query_fingerprint_opts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_fingerprint_opts", allocator, input, parser_options);
            }
            return (MemorySegment)mh$.invokeExact(allocator, input, parser_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_split_with_scanner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PgQuerySplitResult.layout(),
            pg_query_h.C_POINTER
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_split_with_scanner");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PgQuerySplitResult pg_query_split_with_scanner(const char *input)
     * }
     */
    public static FunctionDescriptor pg_query_split_with_scanner$descriptor() {
        return pg_query_split_with_scanner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PgQuerySplitResult pg_query_split_with_scanner(const char *input)
     * }
     */
    public static MethodHandle pg_query_split_with_scanner$handle() {
        return pg_query_split_with_scanner.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PgQuerySplitResult pg_query_split_with_scanner(const char *input)
     * }
     */
    public static MemorySegment pg_query_split_with_scanner$address() {
        return pg_query_split_with_scanner.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PgQuerySplitResult pg_query_split_with_scanner(const char *input)
     * }
     */
    public static MemorySegment pg_query_split_with_scanner(SegmentAllocator allocator, MemorySegment input) {
        var mh$ = pg_query_split_with_scanner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_split_with_scanner", allocator, input);
            }
            return (MemorySegment)mh$.invokeExact(allocator, input);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_split_with_parser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PgQuerySplitResult.layout(),
            pg_query_h.C_POINTER
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_split_with_parser");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PgQuerySplitResult pg_query_split_with_parser(const char *input)
     * }
     */
    public static FunctionDescriptor pg_query_split_with_parser$descriptor() {
        return pg_query_split_with_parser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PgQuerySplitResult pg_query_split_with_parser(const char *input)
     * }
     */
    public static MethodHandle pg_query_split_with_parser$handle() {
        return pg_query_split_with_parser.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PgQuerySplitResult pg_query_split_with_parser(const char *input)
     * }
     */
    public static MemorySegment pg_query_split_with_parser$address() {
        return pg_query_split_with_parser.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PgQuerySplitResult pg_query_split_with_parser(const char *input)
     * }
     */
    public static MemorySegment pg_query_split_with_parser(SegmentAllocator allocator, MemorySegment input) {
        var mh$ = pg_query_split_with_parser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_split_with_parser", allocator, input);
            }
            return (MemorySegment)mh$.invokeExact(allocator, input);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_deparse_protobuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            PgQueryDeparseResult.layout(),
            PgQueryProtobuf.layout()
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_deparse_protobuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PgQueryDeparseResult pg_query_deparse_protobuf(PgQueryProtobuf parse_tree)
     * }
     */
    public static FunctionDescriptor pg_query_deparse_protobuf$descriptor() {
        return pg_query_deparse_protobuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PgQueryDeparseResult pg_query_deparse_protobuf(PgQueryProtobuf parse_tree)
     * }
     */
    public static MethodHandle pg_query_deparse_protobuf$handle() {
        return pg_query_deparse_protobuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PgQueryDeparseResult pg_query_deparse_protobuf(PgQueryProtobuf parse_tree)
     * }
     */
    public static MemorySegment pg_query_deparse_protobuf$address() {
        return pg_query_deparse_protobuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PgQueryDeparseResult pg_query_deparse_protobuf(PgQueryProtobuf parse_tree)
     * }
     */
    public static MemorySegment pg_query_deparse_protobuf(SegmentAllocator allocator, MemorySegment parse_tree) {
        var mh$ = pg_query_deparse_protobuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_deparse_protobuf", allocator, parse_tree);
            }
            return (MemorySegment)mh$.invokeExact(allocator, parse_tree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_free_normalize_result {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            PgQueryNormalizeResult.layout()
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_free_normalize_result");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void pg_query_free_normalize_result(PgQueryNormalizeResult result)
     * }
     */
    public static FunctionDescriptor pg_query_free_normalize_result$descriptor() {
        return pg_query_free_normalize_result.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void pg_query_free_normalize_result(PgQueryNormalizeResult result)
     * }
     */
    public static MethodHandle pg_query_free_normalize_result$handle() {
        return pg_query_free_normalize_result.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void pg_query_free_normalize_result(PgQueryNormalizeResult result)
     * }
     */
    public static MemorySegment pg_query_free_normalize_result$address() {
        return pg_query_free_normalize_result.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void pg_query_free_normalize_result(PgQueryNormalizeResult result)
     * }
     */
    public static void pg_query_free_normalize_result(MemorySegment result) {
        var mh$ = pg_query_free_normalize_result.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_free_normalize_result", result);
            }
            mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_free_scan_result {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            PgQueryScanResult.layout()
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_free_scan_result");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void pg_query_free_scan_result(PgQueryScanResult result)
     * }
     */
    public static FunctionDescriptor pg_query_free_scan_result$descriptor() {
        return pg_query_free_scan_result.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void pg_query_free_scan_result(PgQueryScanResult result)
     * }
     */
    public static MethodHandle pg_query_free_scan_result$handle() {
        return pg_query_free_scan_result.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void pg_query_free_scan_result(PgQueryScanResult result)
     * }
     */
    public static MemorySegment pg_query_free_scan_result$address() {
        return pg_query_free_scan_result.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void pg_query_free_scan_result(PgQueryScanResult result)
     * }
     */
    public static void pg_query_free_scan_result(MemorySegment result) {
        var mh$ = pg_query_free_scan_result.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_free_scan_result", result);
            }
            mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_free_parse_result {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            PgQueryParseResult.layout()
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_free_parse_result");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void pg_query_free_parse_result(PgQueryParseResult result)
     * }
     */
    public static FunctionDescriptor pg_query_free_parse_result$descriptor() {
        return pg_query_free_parse_result.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void pg_query_free_parse_result(PgQueryParseResult result)
     * }
     */
    public static MethodHandle pg_query_free_parse_result$handle() {
        return pg_query_free_parse_result.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void pg_query_free_parse_result(PgQueryParseResult result)
     * }
     */
    public static MemorySegment pg_query_free_parse_result$address() {
        return pg_query_free_parse_result.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void pg_query_free_parse_result(PgQueryParseResult result)
     * }
     */
    public static void pg_query_free_parse_result(MemorySegment result) {
        var mh$ = pg_query_free_parse_result.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_free_parse_result", result);
            }
            mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_free_split_result {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            PgQuerySplitResult.layout()
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_free_split_result");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void pg_query_free_split_result(PgQuerySplitResult result)
     * }
     */
    public static FunctionDescriptor pg_query_free_split_result$descriptor() {
        return pg_query_free_split_result.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void pg_query_free_split_result(PgQuerySplitResult result)
     * }
     */
    public static MethodHandle pg_query_free_split_result$handle() {
        return pg_query_free_split_result.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void pg_query_free_split_result(PgQuerySplitResult result)
     * }
     */
    public static MemorySegment pg_query_free_split_result$address() {
        return pg_query_free_split_result.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void pg_query_free_split_result(PgQuerySplitResult result)
     * }
     */
    public static void pg_query_free_split_result(MemorySegment result) {
        var mh$ = pg_query_free_split_result.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_free_split_result", result);
            }
            mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_free_deparse_result {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            PgQueryDeparseResult.layout()
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_free_deparse_result");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void pg_query_free_deparse_result(PgQueryDeparseResult result)
     * }
     */
    public static FunctionDescriptor pg_query_free_deparse_result$descriptor() {
        return pg_query_free_deparse_result.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void pg_query_free_deparse_result(PgQueryDeparseResult result)
     * }
     */
    public static MethodHandle pg_query_free_deparse_result$handle() {
        return pg_query_free_deparse_result.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void pg_query_free_deparse_result(PgQueryDeparseResult result)
     * }
     */
    public static MemorySegment pg_query_free_deparse_result$address() {
        return pg_query_free_deparse_result.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void pg_query_free_deparse_result(PgQueryDeparseResult result)
     * }
     */
    public static void pg_query_free_deparse_result(MemorySegment result) {
        var mh$ = pg_query_free_deparse_result.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_free_deparse_result", result);
            }
            mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_free_protobuf_parse_result {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            PgQueryProtobufParseResult.layout()
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_free_protobuf_parse_result");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void pg_query_free_protobuf_parse_result(PgQueryProtobufParseResult result)
     * }
     */
    public static FunctionDescriptor pg_query_free_protobuf_parse_result$descriptor() {
        return pg_query_free_protobuf_parse_result.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void pg_query_free_protobuf_parse_result(PgQueryProtobufParseResult result)
     * }
     */
    public static MethodHandle pg_query_free_protobuf_parse_result$handle() {
        return pg_query_free_protobuf_parse_result.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void pg_query_free_protobuf_parse_result(PgQueryProtobufParseResult result)
     * }
     */
    public static MemorySegment pg_query_free_protobuf_parse_result$address() {
        return pg_query_free_protobuf_parse_result.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void pg_query_free_protobuf_parse_result(PgQueryProtobufParseResult result)
     * }
     */
    public static void pg_query_free_protobuf_parse_result(MemorySegment result) {
        var mh$ = pg_query_free_protobuf_parse_result.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_free_protobuf_parse_result", result);
            }
            mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_free_plpgsql_parse_result {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            PgQueryPlpgsqlParseResult.layout()
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_free_plpgsql_parse_result");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void pg_query_free_plpgsql_parse_result(PgQueryPlpgsqlParseResult result)
     * }
     */
    public static FunctionDescriptor pg_query_free_plpgsql_parse_result$descriptor() {
        return pg_query_free_plpgsql_parse_result.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void pg_query_free_plpgsql_parse_result(PgQueryPlpgsqlParseResult result)
     * }
     */
    public static MethodHandle pg_query_free_plpgsql_parse_result$handle() {
        return pg_query_free_plpgsql_parse_result.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void pg_query_free_plpgsql_parse_result(PgQueryPlpgsqlParseResult result)
     * }
     */
    public static MemorySegment pg_query_free_plpgsql_parse_result$address() {
        return pg_query_free_plpgsql_parse_result.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void pg_query_free_plpgsql_parse_result(PgQueryPlpgsqlParseResult result)
     * }
     */
    public static void pg_query_free_plpgsql_parse_result(MemorySegment result) {
        var mh$ = pg_query_free_plpgsql_parse_result.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_free_plpgsql_parse_result", result);
            }
            mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_free_fingerprint_result {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            PgQueryFingerprintResult.layout()
        );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_free_fingerprint_result");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void pg_query_free_fingerprint_result(PgQueryFingerprintResult result)
     * }
     */
    public static FunctionDescriptor pg_query_free_fingerprint_result$descriptor() {
        return pg_query_free_fingerprint_result.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void pg_query_free_fingerprint_result(PgQueryFingerprintResult result)
     * }
     */
    public static MethodHandle pg_query_free_fingerprint_result$handle() {
        return pg_query_free_fingerprint_result.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void pg_query_free_fingerprint_result(PgQueryFingerprintResult result)
     * }
     */
    public static MemorySegment pg_query_free_fingerprint_result$address() {
        return pg_query_free_fingerprint_result.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void pg_query_free_fingerprint_result(PgQueryFingerprintResult result)
     * }
     */
    public static void pg_query_free_fingerprint_result(MemorySegment result) {
        var mh$ = pg_query_free_fingerprint_result.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_free_fingerprint_result", result);
            }
            mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void pg_query_exit()
     * }
     */
    public static FunctionDescriptor pg_query_exit$descriptor() {
        return pg_query_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void pg_query_exit()
     * }
     */
    public static MethodHandle pg_query_exit$handle() {
        return pg_query_exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void pg_query_exit()
     * }
     */
    public static MemorySegment pg_query_exit$address() {
        return pg_query_exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void pg_query_exit()
     * }
     */
    public static void pg_query_exit() {
        var mh$ = pg_query_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_exit");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pg_query_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = pg_query_h.findOrThrow("pg_query_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void pg_query_init()
     * }
     */
    public static FunctionDescriptor pg_query_init$descriptor() {
        return pg_query_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void pg_query_init()
     * }
     */
    public static MethodHandle pg_query_init$handle() {
        return pg_query_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void pg_query_init()
     * }
     */
    public static MemorySegment pg_query_init$address() {
        return pg_query_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void pg_query_init()
     * }
     */
    public static void pg_query_init() {
        var mh$ = pg_query_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pg_query_init");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final int __WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return __WCHAR_MAX;
    }
    private static final int __WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return __WCHAR_MIN;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final long INT_FAST16_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final long INT_FAST32_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final long INT_FAST16_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final long INT_FAST32_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final long UINT_FAST16_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final long UINT_FAST32_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int __BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return __BYTE_ORDER;
    }
    private static final int __FLOAT_WORD_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return __FLOAT_WORD_ORDER;
    }
    private static final int LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return LITTLE_ENDIAN;
    }
    private static final int BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return BIG_ENDIAN;
    }
    private static final int PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return PDP_ENDIAN;
    }
    private static final int BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return BYTE_ORDER;
    }
    private static final long _SIGSET_NWORDS = 16L;
    /**
     * {@snippet lang=c :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return _SIGSET_NWORDS;
    }
    private static final int __NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return __NFDBITS;
    }
    private static final int FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return FD_SETSIZE;
    }
    private static final int NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return NFDBITS;
    }
    private static final int __PTHREAD_RWLOCK_ELISION_EXTRA = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return __PTHREAD_RWLOCK_ELISION_EXTRA;
    }
    private static final int PG_QUERY_PARSE_MODE_BITMASK = (int)15L;
    /**
     * {@snippet lang=c :
     * #define PG_QUERY_PARSE_MODE_BITMASK 15
     * }
     */
    public static int PG_QUERY_PARSE_MODE_BITMASK() {
        return PG_QUERY_PARSE_MODE_BITMASK;
    }
    /**
     * {@snippet lang=c :
     * #define PG_MAJORVERSION "15"
     * }
     */
    public static MemorySegment PG_MAJORVERSION() {
        class Holder {
            static final MemorySegment PG_MAJORVERSION
                = pg_query_h.LIBRARY_ARENA.allocateFrom("15");
        }
        return Holder.PG_MAJORVERSION;
    }
    /**
     * {@snippet lang=c :
     * #define PG_VERSION "15.1"
     * }
     */
    public static MemorySegment PG_VERSION() {
        class Holder {
            static final MemorySegment PG_VERSION
                = pg_query_h.LIBRARY_ARENA.allocateFrom("15.1");
        }
        return Holder.PG_VERSION;
    }
}

