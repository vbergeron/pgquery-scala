// Generated by jextract

package libpg_query.v17;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     char *message;
 *     char *funcname;
 *     char *filename;
 *     int lineno;
 *     int cursorpos;
 *     char *context;
 * }
 * }
 */
public class PgQueryError {

    PgQueryError() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        pg_query_h.C_POINTER.withName("message"),
        pg_query_h.C_POINTER.withName("funcname"),
        pg_query_h.C_POINTER.withName("filename"),
        pg_query_h.C_INT.withName("lineno"),
        pg_query_h.C_INT.withName("cursorpos"),
        pg_query_h.C_POINTER.withName("context")
    ).withName("$anon$7:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout message$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("message"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *message
     * }
     */
    public static final AddressLayout message$layout() {
        return message$LAYOUT;
    }

    private static final long message$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *message
     * }
     */
    public static final long message$offset() {
        return message$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *message
     * }
     */
    public static MemorySegment message(MemorySegment struct) {
        return struct.get(message$LAYOUT, message$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *message
     * }
     */
    public static void message(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(message$LAYOUT, message$OFFSET, fieldValue);
    }

    private static final AddressLayout funcname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("funcname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *funcname
     * }
     */
    public static final AddressLayout funcname$layout() {
        return funcname$LAYOUT;
    }

    private static final long funcname$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *funcname
     * }
     */
    public static final long funcname$offset() {
        return funcname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *funcname
     * }
     */
    public static MemorySegment funcname(MemorySegment struct) {
        return struct.get(funcname$LAYOUT, funcname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *funcname
     * }
     */
    public static void funcname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(funcname$LAYOUT, funcname$OFFSET, fieldValue);
    }

    private static final AddressLayout filename$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("filename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *filename
     * }
     */
    public static final AddressLayout filename$layout() {
        return filename$LAYOUT;
    }

    private static final long filename$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *filename
     * }
     */
    public static final long filename$offset() {
        return filename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *filename
     * }
     */
    public static MemorySegment filename(MemorySegment struct) {
        return struct.get(filename$LAYOUT, filename$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *filename
     * }
     */
    public static void filename(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(filename$LAYOUT, filename$OFFSET, fieldValue);
    }

    private static final OfInt lineno$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lineno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int lineno
     * }
     */
    public static final OfInt lineno$layout() {
        return lineno$LAYOUT;
    }

    private static final long lineno$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int lineno
     * }
     */
    public static final long lineno$offset() {
        return lineno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int lineno
     * }
     */
    public static int lineno(MemorySegment struct) {
        return struct.get(lineno$LAYOUT, lineno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int lineno
     * }
     */
    public static void lineno(MemorySegment struct, int fieldValue) {
        struct.set(lineno$LAYOUT, lineno$OFFSET, fieldValue);
    }

    private static final OfInt cursorpos$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cursorpos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cursorpos
     * }
     */
    public static final OfInt cursorpos$layout() {
        return cursorpos$LAYOUT;
    }

    private static final long cursorpos$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cursorpos
     * }
     */
    public static final long cursorpos$offset() {
        return cursorpos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cursorpos
     * }
     */
    public static int cursorpos(MemorySegment struct) {
        return struct.get(cursorpos$LAYOUT, cursorpos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cursorpos
     * }
     */
    public static void cursorpos(MemorySegment struct, int fieldValue) {
        struct.set(cursorpos$LAYOUT, cursorpos$OFFSET, fieldValue);
    }

    private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *context
     * }
     */
    public static final AddressLayout context$layout() {
        return context$LAYOUT;
    }

    private static final long context$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *context
     * }
     */
    public static final long context$offset() {
        return context$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *context
     * }
     */
    public static MemorySegment context(MemorySegment struct) {
        return struct.get(context$LAYOUT, context$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *context
     * }
     */
    public static void context(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(context$LAYOUT, context$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

